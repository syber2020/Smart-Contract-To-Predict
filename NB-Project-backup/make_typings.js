// Arguments:
// 1. Path to truffle compile/migrate ABI outputs to read
// 2. Name to save the web3x contracts.json file (contracts.json) under (can be wherever)
// 3. Path to save the web3x auto-generated classes under (should be in src)
// 4. Name to save the networks.json file under (should go in src)

// contractFilePathObj is a path.parse() result (from nodejs path api)
// this function returns ContractConfig (from web3x codegen api)
function makeContractFileEntry(contractFilePathObj) {
  return {
    source: 'truffle',
    name: contractFilePathObj.name,
    buildFile: path.format(contractFilePathObj)
  }
}

function zip(keys, values) {
  return keys.reduce((obj, k, i) => ({...obj, [k]: values[i] }), {});
}


// now on with the program!
// Use: make_typings path/to/truffle/outputs
const fs = require('fs');
const path = require('path');

// Strip off node and executable name
const theArgs = process.argv.slice(2);

// first argument is truffle outputs directory
const truffleOutputsDir = path.resolve(__dirname, theArgs[0]);

// second argument is output directory for networks portion of truffle outputs
const web3xConfigFileName = path.resolve(__dirname, theArgs[1]);

// third argument is path to save the web3x auto-generated classes
const web3xAutoGeneratedClassesFolder = path.resolve(__dirname, theArgs[2]);

// fourth argument is name to save the networks.json file under.
const networksJsonFileName = path.resolve(__dirname, theArgs[3]);

// Get the list of the files for the contracts.json
let contractFiles = fs.readdirSync(truffleOutputsDir);
contractFiles = contractFiles.map((file) => path.resolve(truffleOutputsDir, file));
const contractFilesPathObjs = contractFiles.map((file) => path.parse(file));
const contractsListing = contractFilesPathObjs.map((obj) => makeContractFileEntry(obj));
const contractNames = contractFilesPathObjs.map((obj) => obj.name);

// Write the contracts.json file
let contractsJsonFileContents = {
  contracts: zip(contractNames, contractsListing),
  outputPath: web3xAutoGeneratedClassesFolder,
  web3xPath: 'web3x-es'
};
fs.writeFileSync(web3xConfigFileName, JSON.stringify(contractsJsonFileContents), 'utf-8');

// Write the networks.json file
const contractNetworks = contractFilesPathObjs.map((obj) => {
  const file = path.format(obj);
  const fileContents = JSON.parse(fs.readFileSync(file, 'utf-8'));
  return {networks: fileContents.networks};
});
const networksJsonInnerContents = zip(contractNames, contractNetworks);
const networksJsonContents = {contracts: networksJsonInnerContents};
fs.writeFileSync(networksJsonFileName, JSON.stringify(networksJsonContents), 'utf-8');
