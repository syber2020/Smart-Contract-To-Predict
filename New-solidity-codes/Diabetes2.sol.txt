pragma solidity 0.5.5;
// for 4 feature and binary class
contract AnyClass{

    int edenR;int enumR;
    int A0; int A1;int B0; int B1;int C0; int C1;int D0; int D1;int Q;int R;
    int d;int c1;int c2;int c3;int c4;int A;int B;int C;int D; int Y0; int Y1;
    int P0; int P1;

     int[] c; 

    function mux(int[] memory v, uint k) public pure returns(int){
        int x=1;
        for (uint i =0; i <v.length; i++){
            if(i==k){ continue;}
            else{x = x * v[i];}
        }
        return x;
    }
    function reduction(int b,int c,int d) public returns(int,int,int){
        if(b>1000000000000000|| b <1000000000000000 && c>1000000000000000||c<1000000000000000 && d>1000000000000|| d<1000000000000000){
            b = b/1000000000000000; c = c/1000000000000000; d = d/1000000000000000;
        }else if(b>1000000000000 ||b<1000000000000 && c>1000000000000||c<1000000000000 && d>1000000000000||c<1000000000000 ){
            b = b/1000000000000; c = c/1000000000000; d = d/1000000000000;
        }else if(b>1000000000 ||b<1000000000 && c>1000000000||c<1000000000 && d>1000000000||c<1000000000){
            b = b/1000000000; c = c/1000000000; d = d/1000000000;
        }else if(b>1000000 ||b<1000000 && c>1000000||c<1000000 && d>1000000||c<1000000){
            b = b/1000000; c = c/1000000; d = d/1000000;
        }else if(b>1000 ||b<1000 && c>1000||c<1000 && d>1000||c<1000){
            b = b/1000; c = c/1000; d = d/1000;
        }else{
            b =b; c =c; d =d;
        }
        return(b,c,d);

    }
    function a_getparameters1(
        int[] memory x,int[] memory m,int[] memory v) public {
        A0 = 1;B0=1; D0=1; C0=0;
        for (uint i =0; i < x.length; i++ )
        {
            B0 = B0*v[i];
            c.push((x[i]-m[i])*(x[i]-m[i]));
            
        }
        for (uint i =0; i< c.length; i++){
            C0 =C0 + c[i]* mux(v, i); 
        } 
        
        D0 = B0;
        (B0,C0,D0) = reduction(B0,C0,D0);
        delete c;
    }

    function a_getparameters2(
        int[] memory x,int[] memory m,int[] memory v
        ) public {
        A1 = 1;B1=1; D1=1; C1=0;
        for (uint i =0; i < x.length; i++ )
        {
            B1 = B1*v[i];
            c.push((x[i]-m[i])*(x[i]-m[i]));
            
        }
        for (uint i =0; i< c.length; i++){
            C1 =C1 + c[i]* mux(v, i); 
        }
        D1 = B1;
        (B1,C1,D1) = reduction(B1,C1,D1);
        delete c;
    }

    function a_setparameters1() public view returns(int,int,int,int){
        return(A0,B0,C0,D0);
    }

    function a_setparameters2() public view returns(int,int,int,int){
        return(A1,B1,C1,D1);
    }

// save all the gasussian probability computations for all classes and computer probabilty values
    

    uint q; uint r; int en = 19; int ed =7; uint num; uint den;  
   
    function get_e_exponent1( int Prior0, int Prior1)public {
        A = A0*B1;
        B = B0*A1;
        C = (C0*D1)-(C1*D0);
        D = D0*D1;
        Q = int(C/D);
        R = C%D;
        int Enum=19;
        int Eden=7;
        edenR = 24*(D*D*D*D);
        enumR = 24*D*D*D*D+ R*24*D*D*D+R*R*12*D*D+R*R*R*4*D+R*R*R*R;
        
        if(Q==0){
            P0 = A * edenR * Prior0 * Prior0;
            P1 = B * enumR * Prior1 * Prior1;
        }
       else  if(Q==1){
            P0 = A*7*edenR*Prior0*Prior0;
            P1 = B*19*enumR*Prior1*Prior1;
        }else if(Q==2){
            P0 = A*49*edenR*Prior0*Prior0;
            P1 = B*361*enumR*Prior1*Prior1;
        }else if(Q==3){
            P0 = A*343*edenR*Prior0*Prior0;
            P1 = B*6859*enumR*Prior1*Prior1;
        }else if(Q==4){
            P0 = A*2401*edenR*Prior0*Prior0;
            P1 = B*130321*enumR*Prior1*Prior1;
        }else if(Q==5){
            P0 = A*16807*edenR*Prior0*Prior0;
            P1 = B*2476099*enumR*Prior1*Prior1;
        }else if(Q==6){
            P0 = A*117649*edenR*Prior0*Prior0;
            P1 = B*47045881*enumR*Prior1*Prior1;
        }else if(Q==7){
            P0 = A*823543*edenR*Prior0*Prior0;
            P1 = B*893871939*enumR*Prior1*Prior1;
        }else if(Q==8){
            P0 = A*5764801*edenR*Prior0*Prior0;
            P1 = B*169833563041*enumR*Prior1*Prior1;
        }else if(Q==9){
            P0 = A*40353607*edenR*Prior0*Prior0;
            P1 = B*322687697779*enumR*Prior1*Prior1;
        }else if(Q==10){
            P0 = A*282475249*edenR*Prior0*Prior0;
            P1 = B*6131066257801*enumR*Prior1*Prior1;
        }else{
            P0 = A*1*edenR*Prior0*Prior0;
            P1 = B*30000*enumR*Prior1*Prior1;
        }
    }

    function print() public view returns(int,int,int,int,int,int){
        return(A,B,C,D,Q,R);
    }
    function set_e_exponent1() public view returns(int){
        if(P0>P1) return 0;
        else return 1;
    }
}

